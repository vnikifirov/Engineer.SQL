--------------------------------------------------------
--  DDL for Package CUSTOMERS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "CUSTOMERS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */
  procedure GET_PERSONAL_DOCUMENT_TYPES(cur_out out sys_refcursor);
  procedure GET_CUSTOMER_BY_MSISDN(p_msisdn varchar2, cur_out out sys_refcursor);
  procedure GET_PERSON(p_person_id PERSON.PERSON_ID%TYPE, cur_out out sys_refcursor);
  procedure GET_PHYSICAL_PERSON(p_person_id PHYSICAL_PERSON.PERSON_ID%TYPE, cur_out out sys_refcursor);
  procedure GET_JURIDICAL_PERSON(p_person_id JURIDICAL_PERSON.PERSON_ID%TYPE, cur_out out sys_refcursor);
  procedure GET_PERSONAL_DOCUMENT(p_personal_document_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_ID%TYPE, cur_out out sys_refcursor);
  procedure GET_PERSONAL_DOCUMENT_TYPE(p_personal_document_type_id PERSONAL_DOCUMENT_TYPE.ID%TYPE, cur_out out sys_refcursor);
  procedure GET_PERSON_REGISTRATION(p_person_registration_id PERSON_REGISTRATION.PERSON_REGISTRATION_ID%TYPE, cur_out out sys_refcursor);
  
  PROCEDURE CREATE_PERSON(
    p_person_type PERSON.PERSON_TYPE%TYPE,
    p_email PERSON.EMAIL%TYPE,
    p_person_registration_id PERSON.PERSON_REGISTRATION_ID%TYPE,
    p_id out PERSON.PERSON_ID%TYPE);
    
  PROCEDURE CREATE_PHYSICAL_PERSON(
    p_person_id PHYSICAL_PERSON.PERSON_ID%TYPE,
    p_first_name PHYSICAL_PERSON.FIRST_NAME%TYPE,
    p_second_name PHYSICAL_PERSON.SECOND_NAME%TYPE,
    p_last_name PHYSICAL_PERSON.LAST_NAME%TYPE,
    p_birth_day PHYSICAL_PERSON.BIRTH_DAY%TYPE,
    p_citizenship PHYSICAL_PERSON.CITIZENSHIP%TYPE,
    p_gender PHYSICAL_PERSON.GENDER%TYPE,
    p_is_entrepreneur PHYSICAL_PERSON.IS_ENTREPRENEUR%TYPE,
    p_personal_document_id PHYSICAL_PERSON.PERSONAL_DOCUMENT_ID%TYPE);
    
  PROCEDURE CREATE_JURIDICAL_PERSON(
    p_person_id JURIDICAL_PERSON.PERSON_ID%TYPE,
    p_is_resident JURIDICAL_PERSON.IS_RESIDENT%TYPE,
    p_organization_name JURIDICAL_PERSON.ORGANIZATION_NAME%TYPE,
    p_doc_series JURIDICAL_PERSON.DOC_SERIES%TYPE,
    p_doc_number JURIDICAL_PERSON.DOC_NUMBER%TYPE,
    p_vatin JURIDICAL_PERSON.VATIN%TYPE);

  PROCEDURE CREATE_PERSON_REGISTRATION(
    p_start_date PERSON_REGISTRATION.START_DATE%TYPE,
    p_end_date PERSON_REGISTRATION.END_DATE%TYPE,
    p_country_id PERSON_REGISTRATION.COUNTRY_ID%TYPE,
    p_region_code PERSON_REGISTRATION.REGION_CODE%TYPE,
    p_city_code PERSON_REGISTRATION.CITY_CODE%TYPE,
    p_street_code PERSON_REGISTRATION.STREET_CODE%TYPE,
    p_building PERSON_REGISTRATION.BUILDING%TYPE,
    p_housing PERSON_REGISTRATION.HOUSING%TYPE,
    p_appartment PERSON_REGISTRATION.APT%TYPE,
    out_registration_id out PERSON_REGISTRATION.PERSON_REGISTRATION_ID%TYPE);
    
  PROCEDURE CREATE_PERSONAL_DOCUMENT(
    p_doc_number PERSONAL_DOCUMENT.DOC_NUMBER%TYPE,
    p_doc_series PERSONAL_DOCUMENT.DOC_SERIES%TYPE,
    p_doc_type_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_TYPE_ID%TYPE,
    p_issue_date PERSONAL_DOCUMENT.ISSUE_DATE%TYPE,
    out_doc_id out PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_ID%TYPE);
    
  PROCEDURE CREATE_PERSONAL_DOCUMENT(
    p_doc_number PERSONAL_DOCUMENT.DOC_NUMBER%TYPE,
    p_doc_series PERSONAL_DOCUMENT.DOC_SERIES%TYPE,
    p_doc_type_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_TYPE_ID%TYPE,
    p_issue_date PERSONAL_DOCUMENT.ISSUE_DATE%TYPE,
    p_doc_issuer PERSONAL_DOCUMENT.DOC_ISSUER%TYPE,
    out_doc_id out PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_ID%TYPE);
    
  PROCEDURE ASSIGN_VEHICLE_TO_CUSTOMER(
    p_customer_id CUSTOMER.CUSTOMER_ID%TYPE,
    p_vehicle_id VEHICLE.ID%TYPE);

  procedure SET_CUSTOMER_PERSONAL(
    p_customer_id CUSTOMER.CUSTOMER_ID%TYPE,  
    p_person_id PERSON.PERSON_ID%TYPE);

  PROCEDURE UPDATE_PERSON(
    p_person_id PERSON.PERSON_ID%TYPE,
    p_email PERSON.EMAIL%TYPE);

  PROCEDURE UPDATE_PHYSICAL_PERSON(
    p_person_id PHYSICAL_PERSON.PERSON_ID%TYPE,
    p_first_name PHYSICAL_PERSON.FIRST_NAME%TYPE,
    p_second_name PHYSICAL_PERSON.SECOND_NAME%TYPE,
    p_last_name PHYSICAL_PERSON.LAST_NAME%TYPE,
    p_birth_day PHYSICAL_PERSON.BIRTH_DAY%TYPE,
    p_citizenship PHYSICAL_PERSON.CITIZENSHIP%TYPE,
    p_gender PHYSICAL_PERSON.GENDER%TYPE,
    p_is_entrepreneur PHYSICAL_PERSON.IS_ENTREPRENEUR%TYPE);

  PROCEDURE UPDATE_PERSONAL_DOCUMENT(
    p_personal_document_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_ID%TYPE,
    p_doc_number PERSONAL_DOCUMENT.DOC_NUMBER%TYPE,
    p_doc_series PERSONAL_DOCUMENT.DOC_SERIES%TYPE,
    p_doc_type_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_TYPE_ID%TYPE,
    p_issue_date PERSONAL_DOCUMENT.ISSUE_DATE%TYPE);

  PROCEDURE UPDATE_PERSONAL_DOCUMENT(
    p_personal_document_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_ID%TYPE,
    p_doc_number PERSONAL_DOCUMENT.DOC_NUMBER%TYPE,
    p_doc_series PERSONAL_DOCUMENT.DOC_SERIES%TYPE,
    p_doc_type_id PERSONAL_DOCUMENT.PERSONAL_DOCUMENT_TYPE_ID%TYPE,
    p_issue_date PERSONAL_DOCUMENT.ISSUE_DATE%TYPE,
    p_doc_issuer PERSONAL_DOCUMENT.DOC_ISSUER%TYPE);
    
  PROCEDURE UPDATE_PERSON_REGISTRATION(
    p_person_registration_id PERSON_REGISTRATION.PERSON_REGISTRATION_ID%TYPE,
    p_start_date PERSON_REGISTRATION.START_DATE%TYPE,
    p_end_date PERSON_REGISTRATION.END_DATE%TYPE,
    p_country_id PERSON_REGISTRATION.COUNTRY_ID%TYPE,
    p_region_code PERSON_REGISTRATION.REGION_CODE%TYPE,
    p_city_code PERSON_REGISTRATION.CITY_CODE%TYPE,
    p_street_code PERSON_REGISTRATION.STREET_CODE%TYPE,
    p_building PERSON_REGISTRATION.BUILDING%TYPE,
    p_housing PERSON_REGISTRATION.HOUSING%TYPE,
    p_appartment PERSON_REGISTRATION.APT%TYPE);

  PROCEDURE GET_USERNAME_BY_NAME_ID(
    p_first_name PHYSICAL_PERSON.FIRST_NAME%TYPE,
    p_second_name PHYSICAL_PERSON.SECOND_NAME%TYPE,
    p_last_name PHYSICAL_PERSON.LAST_NAME%TYPE,
    p_series PERSONAL_DOCUMENT.DOC_SERIES%TYPE,
    p_number PERSONAL_DOCUMENT.DOC_NUMBER%TYPE,
    cur_out out sys_refcursor);
    
  procedure GET_SECURITY_USER(p_customer_id in number, cur_out out sys_refcursor);

  PROCEDURE GET_USERNAME_BY_EMAIL(
    p_email PHYSICAL_PERSON.FIRST_NAME%TYPE,
    cur_out out sys_refcursor);

  procedure CLEAR_INVALID_PASSPORTS;
 
 procedure GET_COUNT_INVALID_PASSPORTS(cnt_rows out NUMBER);
 
 procedure Get_InvalidPassport(p_serial INVALID_PASSPORTS.PASS_SERIES%TYPE, p_number INVALID_PASSPORTS.PASS_NUMBER%TYPE, cur_out out sys_refcursor);

END CUSTOMERS;

/
